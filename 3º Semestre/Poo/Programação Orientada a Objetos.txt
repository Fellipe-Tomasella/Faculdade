Programa√ß√£o Orientada a Objetos (POO) ‚Äì Resumo para Prova
1. Conceitos Fundamentais
Classes
Uma classe √© um molde para criar objetos.

Cont√©m atributos (dados) e m√©todos (comportamentos).

Sintaxe b√°sica:

java
Copiar
Editar
public class NomeDaClasse {
    // Atributos
    // M√©todos
}
Visibilidade:

public: acess√≠vel por qualquer classe.

private: acess√≠vel apenas dentro da pr√≥pria classe.

Objetos
Inst√¢ncias de uma classe.

T√™m caracter√≠sticas (atributos) e comportamentos (m√©todos).

Exemplo:

java
Copiar
Editar
Televisor tv = new Televisor();
Aqui, tv √© um objeto da classe Televisor.

2. Encapsulamento
Defini√ß√£o: Restri√ß√£o de acesso a atributos e m√©todos.

Vantagens:

Oculta detalhes de implementa√ß√£o.

Torna o c√≥digo mais organizado e seguro.

Minimiza erros e facilita manuten√ß√£o.

Modificadores de Acesso
public: Sem restri√ß√£o de acesso.

private: Somente a pr√≥pria classe pode acessar.

protected: Acess√≠vel dentro da pr√≥pria classe e subclasses.

Padr√£o de Pacote: Acess√≠vel apenas por classes no mesmo pacote.

M√©todos Get e Set
Usados para acessar atributos privados.

Exemplo (Java):

java
Copiar
Editar
public class Pessoa {
    private String nome;

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }
}
3. Construtores e Destrutores
Construtor
M√©todo especial que inicializa um objeto.

Tem o mesmo nome da classe.

Exemplo:

java
Copiar
Editar
public class Pessoa {
    private String nome;

    // Construtor
    public Pessoa(String nome) {
        this.nome = nome;
    }
}
Se n√£o for declarado, o Java cria um construtor padr√£o.

Destrutor
Java faz isso automaticamente com o Garbage Collector.

Libera mem√≥ria quando o objeto n√£o √© mais utilizado.

4. Polimorfismo
Permite que um mesmo m√©todo tenha diferentes comportamentos.

Tipos de Polimorfismo
1. Sobrecarga (Overloading)
Mesmo nome de m√©todo, mas par√¢metros diferentes.

Exemplo:

java
Copiar
Editar
public class Calculadora {
    public int soma(int a, int b) {
        return a + b;
    }

    public double soma(double a, double b) {
        return a + b;
    }
}
2. Sobrescrita (Overriding)
Uma subclasse redefine um m√©todo da superclasse.

Exemplo:

java
Copiar
Editar
class Animal {
    void fazerSom() {
        System.out.println("Som gen√©rico");
    }
}

class Cachorro extends Animal {
    @Override
    void fazerSom() {
        System.out.println("Latido");
    }
}
Dicas para a Prova
‚úîÔ∏è Entenda bem os conceitos de classes e objetos.
‚úîÔ∏è Pratique a cria√ß√£o de classes com atributos e m√©todos.
‚úîÔ∏è Saiba como usar encapsulamento (private, public, protected).
‚úîÔ∏è Estude exemplos de getters e setters.
‚úîÔ∏è Revise construtores e destrutores.
‚úîÔ∏è Diferencie sobrecarga e sobrescrita.
‚úîÔ∏è Pratique a escrita e leitura de c√≥digo Java.

Se precisar de mais alguma explica√ß√£o ou exemplos, me avise! Boa prova! üöÄ





O ChatGPT disse:
Finished thinking.
Aqui est√° um c√≥digo simples de um controle remoto para televis√£o, escrito de uma forma clara para que voc√™ possa copiar no papel facilmente. Ele segue os princ√≠pios da Programa√ß√£o Orientada a Objetos (POO), utilizando encapsulamento e m√©todos getters e setters.

C√≥digo do Controle Remoto da TV
java
Copiar
Editar
// Classe Televisao que representa a TV
public class Televisao {
    private int volume;  // Atributo para o volume
    private int canal;   // Atributo para o canal

    // Construtor para inicializar volume e canal
    public Televisao() {
        this.volume = 10;  // Volume inicial
        this.canal = 1;    // Canal inicial
    }

    // M√©todo para aumentar o volume (m√°x 100)
    public void aumentarVolume() {
        if (volume < 100) {
            volume++;
        }
    }

    // M√©todo para diminuir o volume (m√≠n 0)
    public void diminuirVolume() {
        if (volume > 0) {
            volume--;
        }
    }

    // M√©todo para aumentar o canal (m√°x 999)
    public void aumentarCanal() {
        if (canal < 999) {
            canal++;
        }
    }

    // M√©todo para diminuir o canal (m√≠n 1)
    public void diminuirCanal() {
        if (canal > 1) {
            canal--;
        }
    }

    // M√©todo para definir um canal espec√≠fico
    public void setCanal(int novoCanal) {
        if (novoCanal >= 1 && novoCanal <= 999) {
            this.canal = novoCanal;
        }
    }

    // M√©todos getters para obter o volume e canal
    public int getVolume() {
        return volume;
    }

    public int getCanal() {
        return canal;
    }

    // M√©todo para exibir o status da TV
    public void mostrarStatus() {
        System.out.println("Volume: " + volume + " | Canal: " + canal);
    }
}

// Classe ControleRemoto que controla a TV
public class ControleRemoto {
    private Televisao tv;  // Atributo que representa a TV controlada

    // Construtor para associar o controle a uma TV
    public ControleRemoto(Televisao tv) {
        this.tv = tv;
    }

    // M√©todos que chamam os m√©todos da TV
    public void aumentarVolume() {
        tv.aumentarVolume();
    }

    public void diminuirVolume() {
        tv.diminuirVolume();
    }

    public void aumentarCanal() {
        tv.aumentarCanal();
    }

    public void diminuirCanal() {
        tv.diminuirCanal();
    }

    public void trocarCanal(int canal) {
        tv.setCanal(canal);
    }

    public void exibirStatus() {
        tv.mostrarStatus();
    }
}

// Classe principal (main) para simular o funcionamento
public class Main {
    public static void main(String[] args) {
        Televisao tv = new Televisao();  // Criando um objeto TV
        ControleRemoto controle = new ControleRemoto(tv);  // Criando o controle

        // Simulando comandos do controle remoto
        controle.aumentarVolume();
        controle.aumentarCanal();
        controle.trocarCanal(5);

        // Exibindo status da TV
        controle.exibirStatus();
    }
}
Explica√ß√£o do C√≥digo
üìå Classe Televisao

Cont√©m os atributos volume e canal, ambos privados (encapsulamento).

Possui m√©todos para aumentar/diminuir volume e canal.

Implementa m√©todos getVolume() e getCanal() para acessar os valores.

M√©todo mostrarStatus() exibe o volume e canal atuais.

üìå Classe ControleRemoto

Representa o controle remoto, que tem uma TV associada.

Seus m√©todos chamam os m√©todos da TV para controlar o volume e canal.

üìå Classe Main (Programa Principal)

Cria um objeto Televisao e um ControleRemoto.

Simula o uso do controle remoto, alterando canal e volume.

Exibe o estado atual da TV.

Dicas para a Prova üìù
‚úÖ Escreva com calma, organizando o c√≥digo com indenta√ß√£o.
‚úÖ Coloque coment√°rios para lembrar o que cada parte faz.
‚úÖ Explique sua l√≥gica ao professor caso seja necess√°rio.
‚úÖ Se n√£o lembrar tudo, escreva o b√°sico: uma classe Televisao com m√©todos para volume e canal j√° garante boa parte dos pontos!

Boa prova! üöÄüìö